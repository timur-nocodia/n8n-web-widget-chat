{
  "name": "Chat Proxy AI Assistant",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "chat-proxy-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.jwt_token }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-jwt",
      "name": "Validate JWT",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "// Decode and validate JWT token\nconst jwt = require('jsonwebtoken');\n\nconst token = $input.first().json.jwt_token;\nconst secretKey = $env.JWT_SECRET_KEY || 'your-jwt-secret';\n\ntry {\n  // Decode JWT token\n  const decoded = jwt.verify(token, secretKey);\n  \n  // Validate required fields\n  if (!decoded.session_id || !decoded.origin_domain || decoded.type !== 'chat') {\n    throw new Error('Invalid token payload');\n  }\n  \n  // Check token expiration\n  const now = Math.floor(Date.now() / 1000);\n  if (decoded.exp && decoded.exp < now) {\n    throw new Error('Token has expired');\n  }\n  \n  // Return validated data\n  return [{\n    json: {\n      valid: true,\n      session_id: decoded.session_id,\n      origin_domain: decoded.origin_domain,\n      user_context: decoded.user_context || {},\n      message: $input.first().json.message,\n      context: $input.first().json.context || {},\n      timestamp: $input.first().json.timestamp\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      valid: false,\n      error: error.message\n    }\n  }];\n}"
      },
      "id": "jwt-validation",
      "name": "JWT Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 220]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.valid }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-validation",
      "name": "Check Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Prepare context for AI model\nconst input = $input.first().json;\n\n// Build conversation context\nconst systemMessage = {\n  role: 'system',\n  content: `You are a helpful AI assistant for ${input.origin_domain}. ` +\n           `Current session: ${input.session_id}. ` +\n           `User context: ${JSON.stringify(input.user_context)}. ` +\n           `Additional context: ${JSON.stringify(input.context)}.`\n};\n\nconst userMessage = {\n  role: 'user',\n  content: input.message\n};\n\n// Prepare messages array for AI model\nconst messages = [systemMessage, userMessage];\n\nreturn [{\n  json: {\n    messages: messages,\n    session_id: input.session_id,\n    origin_domain: input.origin_domain,\n    user_context: input.user_context,\n    max_tokens: 500,\n    temperature: 0.7,\n    stream: true\n  }\n}];\n"
      },
      "id": "prepare-context",
      "name": "Prepare AI Context",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 220]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "model": "gpt-3.5-turbo",
        "messages": {
          "messageUi": {
            "messageValues": [
              {
                "role": "system",
                "content": "={{ $json.messages[0].content }}"
              },
              {
                "role": "user", 
                "content": "={{ $json.messages[1].content }}"
              }
            ]
          }
        },
        "options": {
          "maxTokens": "={{ $json.max_tokens }}",
          "temperature": "={{ $json.temperature }}",
          "stream": "={{ $json.stream }}"
        }
      },
      "id": "openai-chat",
      "name": "OpenAI Chat",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1340, 220],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Process AI response and prepare for streaming\nconst input = $input.first().json;\nconst response = input.choices[0];\n\n// Handle streaming response\nif (response.delta && response.delta.content) {\n  return [{\n    json: {\n      event: 'message',\n      data: JSON.stringify({\n        content: response.delta.content,\n        session_id: $('Prepare AI Context').first().json.session_id,\n        timestamp: new Date().toISOString(),\n        model: 'gpt-3.5-turbo',\n        finish_reason: response.finish_reason || null\n      })\n    }\n  }];\n} else if (response.message) {\n  // Handle non-streaming response\n  return [{\n    json: {\n      event: 'message',\n      data: JSON.stringify({\n        content: response.message.content,\n        session_id: $('Prepare AI Context').first().json.session_id,\n        timestamp: new Date().toISOString(),\n        model: 'gpt-3.5-turbo',\n        finish_reason: response.finish_reason || 'stop'\n      })\n    }\n  }];\n}\n\n// Handle completion\nif (response.finish_reason) {\n  return [{\n    json: {\n      event: 'complete',\n      data: JSON.stringify({\n        status: 'completed',\n        session_id: $('Prepare AI Context').first().json.session_id,\n        timestamp: new Date().toISOString()\n      })\n    }\n  }];\n}\n\nreturn [{ json: { event: 'data', data: '' } }];\n"
      },
      "id": "process-response",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 220]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=data: {{ $json.data }}\n\n",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/plain; charset=utf-8"
              },
              {
                "name": "Cache-Control",
                "value": "no-cache"
              },
              {
                "name": "Connection",
                "value": "keep-alive"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "stream-response",
      "name": "Stream Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 220]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"Invalid or missing JWT token\",\n  \"code\": \"INVALID_TOKEN\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "responseStatusCode": 401
        }
      },
      "id": "invalid-jwt-response",
      "name": "Invalid JWT Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 380]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"Authentication failed\",\n  \"code\": \"AUTH_FAILED\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type", 
                "value": "application/json"
              }
            ]
          },
          "responseStatusCode": 403
        }
      },
      "id": "auth-failed-response",
      "name": "Auth Failed Response", 
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 380]
    },
    {
      "parameters": {
        "functionCode": "// Log chat interaction for analytics\nconst input = $input.first().json;\n\n// Prepare log entry\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  session_id: input.session_id,\n  origin_domain: input.origin_domain,\n  message_length: input.message.length,\n  user_context: input.user_context,\n  model_used: 'gpt-3.5-turbo',\n  processing_time: Date.now() - new Date(input.timestamp).getTime()\n};\n\n// In production, send to logging service\nconsole.log('CHAT_LOG:', JSON.stringify(logEntry));\n\nreturn [{ json: logEntry }];\n"
      },
      "id": "log-interaction",
      "name": "Log Interaction",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 380]
    }
  ],
  "connections": {
    "Chat Webhook": {
      "main": [
        [
          {
            "node": "Validate JWT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate JWT": {
      "main": [
        [
          {
            "node": "JWT Validation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invalid JWT Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JWT Validation": {
      "main": [
        [
          {
            "node": "Check Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Failed Response",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Context": {
      "main": [
        [
          {
            "node": "OpenAI Chat",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Interaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Stream Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler-workflow"
  },
  "staticData": {},
  "tags": ["chat", "ai", "proxy", "security"],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}